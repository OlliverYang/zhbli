BASE_TASK_CONFIG_PATH: "bps_nav/configs/tasks/pointnav_gibson.yaml"
TRAINER_NAME: "ddppo"
ENV_NAME: "NavRLEnv"
SIMULATOR_GPU_ID: 0
TORCH_GPU_ID: 0
VIDEO_OPTION: []
TENSORBOARD_DIR: "tb/gibson-depth"
VIDEO_DIR: "video_dir"
TEST_EPISODE_COUNT: -1
EVAL_CKPT_PATH_DIR: "data/checkpoints/mp3d-resnet18-v4r-testing"
SIM_BATCH_SIZE: 128
SENSORS: []
CHECKPOINT_FOLDER: "data/checkpoints/mp3d-resnet18-v4r-testing"
TOTAL_NUM_STEPS: 2.5e9
LOG_INTERVAL: 50
POLICY_NAME: "ResNetPolicy"
NUM_PARALLEL_SCENES: 4


COLOR: True
DEPTH: False

RESOLUTION: [64, 64]


EVAL:
  USE_CKPT_CONFIG: False

RL:
  SUCCESS_REWARD: 2.5
  PPO:
    # ppo params
    clip_param: 0.2
    ppo_epoch: 1
    num_mini_batch: 2
    value_loss_coef: 0.5
    entropy_coef: 0.01
    lr: 5.0e-4
    eps: 1.0e-5
    max_grad_norm: 0.25
    num_steps: 32
    use_gae: True
    gamma: 0.99
    tau: 0.95
    use_linear_clip_decay: False
    use_linear_lr_decay: False
    reward_window_size: 50

    use_normalized_advantage: False

    hidden_size: 512

    lamb: True
    lamb_min_trust: 0.01

  DDPPO:
    sync_frac: 0.6
    # The PyTorch distributed backend to use
    distrib_backend: NCCL
    # Visual encoder backbone
    pretrained_weights: data/ddppo-models/gibson-2plus-resnet50.pth
    # Initialize with pretrained weights
    pretrained: False
    # Initialize just the visual encoder backbone with pretrained weights
    pretrained_encoder: False
    # Whether or not the visual encoder backbone will be trained.
    train_encoder: True
    # Whether or not to reset the critic linear layer
    reset_critic: True

    # Model parameters
    backbone: resnet9
    rnn_type: LSTM
    num_recurrent_layers: 2
    resnet_baseplanes: 64

    scale_lr: True

    step_ramp: 1
    step_ramp_start: 4
